---
title: "Homework 2"
author: "Max Rohde"
subtitle: "BIOS 362 Spring 2022"
date: "`r Sys.Date()`"
format:
    html: 
      theme: simplex 
      self-contained: true
---

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(geomtextpath)
```

```{r}
# Load in data
df <- 
 read.table(url(
    'https://web.stanford.edu/~hastie/ElemStatLearn/datasets/prostate.data')) %>%
  as_tibble()
```

## Part 1
Write functions that implement the L1 loss, L2 loss, and tilted absolute loss functions.

---

```{r}
L1_loss <- function(y, yhat){
  abs(y-yhat)
}
```

```{r}
L2_loss <- function(y, yhat){
  (y-yhat)^2
}
```

```{r}
t_loss <- function(y, yhat, tau){
  ifelse(y>yhat, tau*(y-yhat), (tau-1)*(y-yhat))
}
```

Below we show example of the tilted loss function. When $\tau > 0.5$, we penalize underprediction more than overprediction.

```{r}
# Underprediction example
y <- c(1,2,3,4,5,6)
yhat <- y - 0.5
```

```{r}
sum(t_loss(y, yhat, tau=0.25))
sum(t_loss(y, yhat, tau=0.75))
```


When $\tau < 0.5$, we penalize overprediction more than underprediction.

```{r}
# Overprediction example
y <- c(1,2,3,4,5,6)
yhat <- y + 0.5
```
```{r}
sum(t_loss(y, yhat, tau=0.25))
sum(t_loss(y, yhat, tau=0.75))
```


## Part 2

Create a figure that shows `lpsa` (x-axis) versus `lcavol` (y-axis). Add and label (using the `legend` function) the linear model predictors associated with L2 loss, L1 loss, and tilted absolute value loss for $\tau$ = 0.25 and 0.75.

---

```{r}
fit_lin <- function(x, y, loss, beta_init = c(0,0)) {
  beta <- optim(par = beta_init, fn = function(beta) mean(loss(y,  beta[1] + beta[2]*x)))
  return(beta$par)
}

predict_lin <- function(x, beta){
  beta[1] + beta[2]*x
}
```

```{r}
# Compute betas for each loss function
beta_L1 <- fit_lin(x=df$lpsa,
                   y=df$lcavol,
                   loss=L1_loss)

beta_L2 <- fit_lin(x=df$lpsa,
                   y=df$lcavol,
                   loss=L2_loss)

beta_t_025 <- fit_lin(x=df$lpsa,
                   y=df$lcavol,
                   loss=partial(t_loss, tau=0.25))

beta_t_075 <- fit_lin(x=df$lpsa,
                   y=df$lcavol,
                   loss=partial(t_loss, tau=0.75))
```

```{r}
# Create predictions for each loss function
x <- seq(min(df$lpsa), max(df$lpsa), length.out=1e4)
pred_L1 <- predict_lin(x, beta_L1)
pred_L2 <- predict_lin(x, beta_L2)
pred_t_025 <- predict_lin(x, beta_t_025)
pred_t_075 <- predict_lin(x, beta_t_075)
```

```{r}
# Create dataset for plotting prediction
df_plot <-
  tibble(x, pred_L1, pred_L2, pred_t_025, pred_t_075) %>%
  pivot_longer(pred_L1:pred_t_075,
               names_to = "loss_function",
               values_to = "yhat")

df_plot$loss_function <-
  recode(df_plot$loss_function,
         pred_L1 = "L1 Loss",
         pred_L2 = "L2 Loss",
         pred_t_025 = "Tilted Loss (tau = 0.25)",
         pred_t_075 = "Tilted Loss (tau = 0.75)" )
```

```{r}
#| fig-width: 6
#| fig-height: 6
#| out-width: 150%
#| fig-cap: Comparison of predictions from each loss function

# Plot prediction for each loss function
ggplot() +
  aes() +
  geom_point(data=df,
             mapping=aes(x=lpsa, y=lcavol), alpha=0.3) +
  geom_textline(data=df_plot,
            mapping=aes(x=x, y=yhat,
                        color=loss_function,
                        label=loss_function),
            key_glyph = "path") +
  labs(title="Comparison of different loss functions",
       color="Loss Function") +
  scale_color_brewer(type = "qual", palette=2) +
  theme_bw() +
  theme(legend.position = c(0.8, 0.2))
```


## Part 3

Write functions to fit and predict from a simple nonlinear model with three parameters defined by `beta[1] + beta[2]*exp(-beta[3]*x)`.

Hint: make copies of `fit_lin` and `predict_lin` and modify them to fit the nonlinear model. Use `c(-1.0, 0.0, -0.3)` as `beta_init`.

---

```{r}
fit_lin <- function(x, y, loss, beta_init = c(0,0,0)) {
  beta <- optim(par = beta_init, fn = function(beta) mean(loss(y,  beta[1] + beta[2]*exp(-beta[3]*x))))
  return(beta$par)
}

predict_lin <- function(x, beta){
  beta[1] + beta[2]*exp(-beta[3]*x)
}
```


## Part 4

Create a figure that shows `lpsa` (x-axis) versus `lcavol` (y-axis). Add and label (using the `legend` function) the nonlinear model predictors associated with L2 loss, L1 loss, and tilted absolute value loss for $\tau$ = 0.25 and 0.75.

---

```{r}
# Compute betas for each loss function
beta_L1 <- fit_lin(x=df$lpsa,
                   y=df$lcavol,
                   loss=L1_loss)

beta_L2 <- fit_lin(x=df$lpsa,
                   y=df$lcavol,
                   loss=L2_loss)

beta_t_025 <- fit_lin(x=df$lpsa,
                   y=df$lcavol,
                   loss=partial(t_loss, tau=0.25))

beta_t_075 <- fit_lin(x=df$lpsa,
                   y=df$lcavol,
                   loss=partial(t_loss, tau=0.75))
```

```{r}
# Create predictions for each loss function
x <- seq(min(df$lpsa), max(df$lpsa), length.out=1e4)
pred_L1 <- predict_lin(x, beta_L1)
pred_L2 <- predict_lin(x, beta_L2)
pred_t_025 <- predict_lin(x, beta_t_025)
pred_t_075 <- predict_lin(x, beta_t_075)
```

```{r}
# Create dataset for plotting prediction
df_plot <-
  tibble(x, pred_L1, pred_L2, pred_t_025, pred_t_075) %>%
  pivot_longer(pred_L1:pred_t_075,
               names_to = "loss_function",
               values_to = "yhat")

df_plot$loss_function <-
  recode(df_plot$loss_function,
         pred_L1 = "L1 Loss",
         pred_L2 = "L2 Loss",
         pred_t_025 = "Tilted Loss (tau = 0.25)",
         pred_t_075 = "Tilted Loss (tau = 0.75)" )
```

```{r}
#| fig-width: 6
#| fig-height: 6
#| out-width: 150%
#| fig-cap: Comparison of predictions from each loss function

# Plot prediction for each loss function
ggplot() +
  aes() +
  geom_point(data=df,
             mapping=aes(x=lpsa, y=lcavol), alpha=0.3) +
  geom_textline(data=df_plot,
            mapping=aes(x=x, y=yhat,
                        color=loss_function,
                        label=loss_function),
            key_glyph = "path") +
  labs(title="Comparison of different loss functions",
       color="Loss Function") +
  scale_color_brewer(type = "qual", palette=2) +
  theme_bw() +
  theme(legend.position = c(0.8, 0.2))
```
